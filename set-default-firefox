#!/usr/bin/env python3
"""
set_default_profile.py — mark a Firefox profile as the default without
rewriting the rest of profiles.ini.

Usage:  set_default_profile.py <ProfileName>
"""
from __future__ import annotations
import argparse, pathlib, shutil, sys, tempfile, textwrap

INI_PATH = pathlib.Path.home() / ".mozilla/firefox/profiles.ini"


def main() -> None:
    parser = argparse.ArgumentParser(description="Safely set default Firefox profile")
    parser.add_argument("profile_name", help="Exact value after Name=")
    args = parser.parse_args()
    wanted = args.profile_name

    # 1. Read original file as *raw* lines so we can preserve them verbatim
    try:
        lines = INI_PATH.read_text(encoding="utf-8").splitlines(keepends=True)
    except FileNotFoundError:
        sys.exit(f"ERROR: {INI_PATH} not found.")

    # 2. Strip every existing Default=… line (case-insensitive key match)
    new_lines: list[str] = []
    for ln in lines:
        stripped = ln.lstrip()
        if stripped.lower().startswith("default="):
            continue               # drop it
        new_lines.append(ln)

    # 3. Locate the section that owns Name=<wanted>
    insert_at = None             # line index after the Path=… line
    in_section = False
    for idx, ln in enumerate(new_lines):
        if ln.startswith("[") and ln.rstrip().endswith("]"):
            in_section = True
            continue

        if in_section and ln.lstrip().lower().startswith("name="):
            if ln.split("=", 1)[1].strip() == wanted:
                # This is the profile section we need
                # Now look ahead for Path=…
                j = idx + 1
                while j < len(new_lines) and not new_lines[j].startswith("["):
                    if new_lines[j].lstrip().lower().startswith("path="):
                        insert_at = j + 1  # place Default=1 right after Path
                        break
                    j += 1
                if insert_at is None:      # no Path key found; append at section end
                    insert_at = j
                break
        elif ln.startswith("["):
            in_section = False  # left a section

    if insert_at is None:
        sys.exit(f"ERROR: profile named {wanted!r} not found in {INI_PATH}")

    # 4. Insert the one and only Default flag
    new_lines.insert(insert_at, "Default=1\n")

    # 5. Write to temp file, then atomically replace original (after a backup)
    backup = INI_PATH.with_suffix(".ini.bak")
    shutil.copy2(INI_PATH, backup)

    with tempfile.NamedTemporaryFile("w", delete=False, dir=INI_PATH.parent) as tf:
        tf.writelines(new_lines)
        temp_name = pathlib.Path(tf.name)

    temp_name.replace(INI_PATH)  # atomic on POSIX

    print(textwrap.dedent(f"""\
        Success: profile {wanted!r} is now the default.
        Backup written to {backup}
    """))


if __name__ == "__main__":
    main()

